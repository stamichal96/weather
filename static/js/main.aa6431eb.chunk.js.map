{"version":3,"sources":["components/weather.jsx","components/form.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","temp_min","max","temp_max","description","Form","error","role","onSubmit","load","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","APIcall","json","response","setState","sys","celsius","calculateCelsius","main","temp","weather","getWeatherIcon","id","state","undefined","icon","Thunderstrom","Drizzle","Rain","Snow","Fog","Clear","Clouds","icons","rangeID","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.aa6431eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weather.scss';\r\n\r\nfunction minmaxTemp(min, max){\r\n    if(min && max){\r\n    return (\r\n        <h3>\r\n            <span className=\"px-4\">Min temp:  {min}&deg;</span>\r\n            <span className=\"px-4\">Max temp:  {max}&deg;</span>\r\n        </h3>\r\n    )}else{\r\n        return (null)\r\n    }\r\n}\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}/>\r\n                </h5>\r\n                { props.temp_celsius ? <h1 className=\"py-2\">Temp: {props.temp_celsius}&deg;</h1> : null }\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather","import React from 'react';\r\nimport './form.scss';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"cotainer\">\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={props.load}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 offset-md-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"city\"\r\n                            autoComplete=\"off\"\r\n                            placeholder=\"City\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"country\"\r\n                            autoComplete=\"off\"\r\n                            placeholder=\"Country\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-self-center pt-4\">\r\n                    <div className=\"col\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error() {\r\n    return (<div className=\"alert alert-danger mx-5\" role=\"alert\">Please enter city and country</div>)\r\n}\r\n\r\nexport default Form;","import React from 'react';\n\nimport Weather from './components/weather';\nimport Form from './components/form';\n\nimport './assets/weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst APIkey = \"6110c71e90ea0c1327f49f21fd36b505\";\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false,\n    };\n    this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstrom: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Fog: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    }\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstrom })\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle })\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain })\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow })\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Fog })\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear })\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds })\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds })\n    }\n  }\n\n  calculateCelsius(temp) {\n    let celsius = Math.floor(temp - 273.15)\n    return celsius\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault()\n\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n\n    if (city && country) {\n      const APIcall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIkey}`);\n      const response = await APIcall.json()\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        celsius: this.calculateCelsius(response.main.temp),\n        temp_min: this.calculateCelsius(response.main.temp_min),\n        temp_max: this.calculateCelsius(response.main.temp_max),\n        description: response.weather[0].description,\n      })\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id)\n    } else {\n      this.setState({ error: true })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          load={this.getWeather}\n          error={this.state.error}\n        />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_min={this.state.temp_min}\n          temp_max={this.state.temp_max}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}